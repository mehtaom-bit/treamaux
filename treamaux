#define leftsonicip
#define midsonicip
#define rightsonicip
#define leftsonicop
#define midsonicop
#define rightsonicop
#define motorrightfor
#define motorrightback
#define motorleftfor
#define motorleftback
#define NORTH 0
#define EAST 1
#define SOUTH 2
#define WEST 3

int x = 10, y = 0;          // Robot initial position
int marks[20][20] = { 0 };  // Grid for visited cells

int direction = NORTH;  //initial bot direction

float durationright, durationleft, durationmid, distanceright, distanceleft, distancemid;  //ultrasonic sensor variables

void setup() {
  pinMode(leftsonicip, INPUT);
  pinMode(midsonicip, INPUT);
  pinMode(rightsonicip, INPUT);
  pinMode(leftsonicop, OUTPUT);
  pinMode(midsonicop, OUTPUT);
  pinMode(rightsonicop, OUTPUT);
  pinMode(motorrightfor, OUTPUT);
  pinMode(motorrightback, OUTPUT);
  pinMode(motorleftfor, OUTPUT);
  pinMode(motorleftback, OUTPUT);
}

float getdistanceleft() {          //getting distance of wall from left sensor
  digitalWrite(leftsonicop, LOW);  //resets ultrasonic
  delayMicroseconds(2);
  digitalWrite(leftsonicop, HIGH);  //sends signal
  delayMicroseconds(10);
  digitalWrite(leftsonicop, LOW);             //resets
  durationleft = pulseIn(leftsonicip, HIGH);  //gets duration input from sensor
  return (durationleft * .0343) / 2;          //converts to distance
}

float getdistanceright() {          //getting distance of wall from right sensor
  digitalWrite(rightsonicop, LOW);  //resets ultrasonic
  delayMicroseconds(2);
  digitalWrite(rightsonicop, HIGH);  //sends signal
  delayMicroseconds(10);
  digitalWrite(rightsonicop, LOW);              //resets
  durationright = pulseIn(rightsonicip, HIGH);  //gets duration input from sensor
  return (durationright * .0343) / 2;           //converts to distance
}

float getdistancemid() {          //getting distance of wall form mid sensor
  digitalWrite(midsonicop, LOW);  //resets ultrasonic
  delayMicroseconds(2);
  digitalWrite(midsonicop, HIGH);  //sends signal
  delayMicroseconds(10);
  digitalWrite(midsonicop, LOW);            //resets
  durationmid = pulseIn(midsonicip, HIGH);  //gets duration input from sensor
  return (durationmid * .0343) / 2;         //converts to distance
}

void moveforward() {
  analogWrite(motorleftfor, 200);
  analogWrite(motorleftback, 0);
  analogWrite(motorrightfor, 200);
  analogWrite(motorrightback, 0);

  delay(300);
}

void movebackward() {  //180 degree turn rather than moving backward for better maze solving
  analogWrite(motorleftfor, 200);
  analogWrite(motorleftback, 0);
  analogWrite(motorrightfor, 0);
  analogWrite(motorrightback, 200);

  direction = (direction + 2) % 4; //reverse direction

  delay(800);
}

void turnright() {
  analogWrite(motorleftfor, 200);
  analogWrite(motorleftback, 0);
  analogWrite(motorrightfor, 0);
  analogWrite(motorrightback, 200);

  direction = (direction + 1) % 4;  //changing the direction accordingly

  delay(400);
}

void turnleft() {
  analogWrite(motorleftfor, 0);
  analogWrite(motorleftback, 200);
  analogWrite(motorrightfor, 200);
  analogWrite(motorrightback, 0);

  direction = (direction + 3) % 4;  //changing the direction accordingly

  delay(400);
}

bool isPathFront() {
  return getdistancemid() > 5;
}

bool isPathRight() {
  return getdistanceright() > 5;
}

bool isPathLeft() {
  return getdistanceleft() > 5;
}

void treamaux() {

  // Detect open paths
  bool front = isPathFront();
  bool left = isPathLeft();
  bool right = isPathRight();

  // Navigate based on available paths
  if (front && marks[x][y + 1] == 0) {  //checks the node in front for 0 and also if there is path
    moveforward();
  } else if (left && marks[x - 1][y] == 0) {  //checks the node in left for 0 and also if there is path
    if (direction == NORTH) {                 //changing the current element of matrix to be marked
      y++;                                    // Move up
    } else if (direction == SOUTH) {
      y--;  // Move down
    } else if (direction == EAST) {
      x++;  // Move right
    } else if (direction == WEST) {
      x--;  // Move left
    }
    marks[x][y]++;
    turnleft();
    moveforward();
  } else if (right && marks[x + 1][y] == 0) {  //checks the node in right for 0 and also if there is path
    if (direction == NORTH) {                  //changing the current element of the matrix to be marked
      y++;                                     // Move up
    } else if (direction == SOUTH) {
      y--;  // Move down
    } else if (direction == EAST) {
      x++;  // Move right
    } else if (direction == WEST) {
      x--;  // Move left
    }
    marks[x][y]++;
    turnright();
    moveforward();
  } else if (front && marks[x][y + 1] == 1) {  //next priority node is 1. checking it and also if there is path
    moveforward();
  } else if (left && marks[x - 1][y] == 1) {  //next priority node is 1. checking it and also if there is path
    if (direction == NORTH) {                 //changing the current element of the matrix to be marked
      y++;                                    // Move up
    } else if (direction == SOUTH) {
      y--;  // Move down
    } else if (direction == EAST) {
      x--;  // Move right
    } else if (direction == WEST) {
      x++;  // Move left
    }
    marks[x][y]++;
    turnleft();
    moveforward();
  } else if (right && marks[x + 1][y] == 1) {  //next priority node is 1. checking it and also if there is path
    if (direction == NORTH) {                  //changing the current element of the matrix to be marked
      y++;                                     // Move up
    } else if (direction == SOUTH) {
      y--;  // Move down
    } else if (direction == EAST) {
      x++;  // Move right
    } else if (direction == WEST) {
      x--;  // Move left
    }
    marks[x][y]++;
    turnright();
    moveforward();
  } else {
    // Dead end â†’ Backtrack
    movebackward();
  }
}

void loop() {
  treamaux();
  delay(200);
}
